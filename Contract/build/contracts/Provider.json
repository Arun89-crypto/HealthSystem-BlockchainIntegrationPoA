{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressOfProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "Providers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_UserAddress",
          "type": "address"
        }
      ],
      "name": "checkIfProvider",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_UserAddress",
          "type": "address"
        }
      ],
      "name": "setProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/provider.sol"
  },
  "ast": {
    "absolutePath": "contracts/provider.sol",
    "exportedSymbols": {
      "Provider": [
        261
      ]
    },
    "id": 262,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 200,
        "literals": [
          "solidity",
          ">=",
          "0.6",
          ".6",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:31:1"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Provider",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 261,
        "linearizedBaseContracts": [
          261
        ],
        "name": "Provider",
        "nameLocation": "74:8:1",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "1776904a",
            "id": 202,
            "mutability": "mutable",
            "name": "AddressOfProvider",
            "nameLocation": "104:17:1",
            "nodeType": "VariableDeclaration",
            "scope": 261,
            "src": "89:32:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 201,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "89:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "8da5cb5b",
            "id": 204,
            "mutability": "mutable",
            "name": "owner",
            "nameLocation": "142:5:1",
            "nodeType": "VariableDeclaration",
            "scope": 261,
            "src": "127:20:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 203,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "127:7:1",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 217,
              "nodeType": "Block",
              "src": "168:75:1",
              "statements": [
                {
                  "expression": {
                    "id": 210,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 207,
                      "name": "AddressOfProvider",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 202,
                      "src": "178:17:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 208,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "198:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 209,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "198:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "178:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 211,
                  "nodeType": "ExpressionStatement",
                  "src": "178:30:1"
                },
                {
                  "expression": {
                    "id": 215,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 212,
                      "name": "owner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 204,
                      "src": "218:5:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 213,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "226:3:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 214,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "226:10:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "218:18:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 216,
                  "nodeType": "ExpressionStatement",
                  "src": "218:18:1"
                }
              ]
            },
            "id": 218,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 205,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "165:2:1"
            },
            "returnParameters": {
              "id": 206,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "168:0:1"
            },
            "scope": 261,
            "src": "154:89:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "018d0f8d",
            "id": 222,
            "mutability": "mutable",
            "name": "Providers",
            "nameLocation": "339:9:1",
            "nodeType": "VariableDeclaration",
            "scope": 261,
            "src": "307:41:1",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 221,
              "keyType": {
                "id": 219,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "315:7:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "307:24:1",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueType": {
                "id": 220,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "326:4:1",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 233,
              "nodeType": "Block",
              "src": "376:159:1",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 228,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "expression": {
                            "id": 225,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -15,
                            "src": "407:3:1",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 226,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "src": "407:10:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "id": 227,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 204,
                          "src": "421:5:1",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "407:19:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "hexValue": "796f75206e65656420746f206265206120636f6e7472616374206f776e657220696e206f7264657220746f206578656375746520746869732066756e6374696f6e",
                        "id": 229,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "440:67:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_dbbfc8af8188e205138e479a60cb8efec10bff1e73f4d32ba0f90b7ef2cb427d",
                          "typeString": "literal_string \"you need to be a contract owner in order to execute this function\""
                        },
                        "value": "you need to be a contract owner in order to execute this function"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_dbbfc8af8188e205138e479a60cb8efec10bff1e73f4d32ba0f90b7ef2cb427d",
                          "typeString": "literal_string \"you need to be a contract owner in order to execute this function\""
                        }
                      ],
                      "id": 224,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "386:7:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 230,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "386:131:1",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 231,
                  "nodeType": "ExpressionStatement",
                  "src": "386:131:1"
                },
                {
                  "id": 232,
                  "nodeType": "PlaceholderStatement",
                  "src": "527:1:1"
                }
              ]
            },
            "id": 234,
            "name": "onlyOwner",
            "nameLocation": "364:9:1",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 223,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "373:2:1"
            },
            "src": "355:180:1",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 247,
              "nodeType": "Block",
              "src": "631:47:1",
              "statements": [
                {
                  "expression": {
                    "id": 245,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 241,
                        "name": "Providers",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 222,
                        "src": "641:9:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 243,
                      "indexExpression": {
                        "id": 242,
                        "name": "_UserAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 236,
                        "src": "651:12:1",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "641:23:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 244,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "667:4:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "641:30:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 246,
                  "nodeType": "ExpressionStatement",
                  "src": "641:30:1"
                }
              ]
            },
            "functionSelector": "cfd8d6c0",
            "id": 248,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 239,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 238,
                  "name": "onlyOwner",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 234,
                  "src": "621:9:1"
                },
                "nodeType": "ModifierInvocation",
                "src": "621:9:1"
              }
            ],
            "name": "setProvider",
            "nameLocation": "580:11:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 237,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 236,
                  "mutability": "mutable",
                  "name": "_UserAddress",
                  "nameLocation": "600:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 248,
                  "src": "592:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 235,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "592:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "591:22:1"
            },
            "returnParameters": {
              "id": 240,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "631:0:1"
            },
            "scope": 261,
            "src": "571:107:1",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 259,
              "nodeType": "Block",
              "src": "805:47:1",
              "statements": [
                {
                  "expression": {
                    "baseExpression": {
                      "id": 255,
                      "name": "Providers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 222,
                      "src": "822:9:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 257,
                    "indexExpression": {
                      "id": 256,
                      "name": "_UserAddress",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 250,
                      "src": "832:12:1",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "822:23:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 254,
                  "id": 258,
                  "nodeType": "Return",
                  "src": "815:30:1"
                }
              ]
            },
            "functionSelector": "d64799a7",
            "id": 260,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkIfProvider",
            "nameLocation": "740:15:1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 251,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 250,
                  "mutability": "mutable",
                  "name": "_UserAddress",
                  "nameLocation": "764:12:1",
                  "nodeType": "VariableDeclaration",
                  "scope": 260,
                  "src": "756:20:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 249,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "756:7:1",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "755:22:1"
            },
            "returnParameters": {
              "id": 254,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 253,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 260,
                  "src": "799:4:1",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 252,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "799:4:1",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "798:6:1"
            },
            "scope": 261,
            "src": "731:121:1",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 262,
        "src": "65:789:1",
        "usedErrors": []
      }
    ],
    "src": "32:823:1"
  },
  "bytecode": "608060405234801561001057600080fd5b5060008054336001600160a01b0319918216811783556001805490921617905561022b90819061004090396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063018d0f8d1461005c5780631776904a146100945780638da5cb5b146100bf578063cfd8d6c0146100d2578063d64799a7146100e7575b600080fd5b61007f61006a3660046101c5565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6000546100a7906001600160a01b031681565b6040516001600160a01b03909116815260200161008b565b6001546100a7906001600160a01b031681565b6100e56100e03660046101c5565b610113565b005b61007f6100f53660046101c5565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b031633146101a15760405162461bcd60e51b815260206004820152604160248201527f796f75206e65656420746f206265206120636f6e7472616374206f776e65722060448201527f696e206f7264657220746f206578656375746520746869732066756e6374696f6064820152603760f91b608482015260a40160405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000602082840312156101d757600080fd5b81356001600160a01b03811681146101ee57600080fd5b939250505056fea2646970667358221220cd8363d35e8a79f6dcb6a1ec4cb9ec8c66e75bae062affed20b8f2e819ed47bc64736f6c634300080b0033",
  "bytecodeSha1": "8ca669e6f3428c1c22bf4d613cf2cbb3104e959e",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.11+commit.d7f03943"
  },
  "contractName": "Provider",
  "coverageMap": {
    "branches": {
      "1": {}
    },
    "statements": {
      "1": {
        "Provider.checkIfProvider": {
          "0": [
            815,
            845
          ]
        },
        "Provider.setProvider": {
          "1": [
            641,
            671
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100575760003560e01c8063018d0f8d1461005c5780631776904a146100945780638da5cb5b146100bf578063cfd8d6c0146100d2578063d64799a7146100e7575b600080fd5b61007f61006a3660046101c5565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6000546100a7906001600160a01b031681565b6040516001600160a01b03909116815260200161008b565b6001546100a7906001600160a01b031681565b6100e56100e03660046101c5565b610113565b005b61007f6100f53660046101c5565b6001600160a01b031660009081526002602052604090205460ff1690565b6001546001600160a01b031633146101a15760405162461bcd60e51b815260206004820152604160248201527f796f75206e65656420746f206265206120636f6e7472616374206f776e65722060448201527f696e206f7264657220746f206578656375746520746869732066756e6374696f6064820152603760f91b608482015260a40160405180910390fd5b6001600160a01b03166000908152600260205260409020805460ff19166001179055565b6000602082840312156101d757600080fd5b81356001600160a01b03811681146101ee57600080fd5b939250505056fea2646970667358221220cd8363d35e8a79f6dcb6a1ec4cb9ec8c66e75bae062affed20b8f2e819ed47bc64736f6c634300080b0033",
  "deployedSourceMap": "65:789:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;307:41;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;470:14:2;;463:22;445:41;;433:2;418:18;307:41:1;;;;;;;;89:32;;;;;-1:-1:-1;;;;;89:32:1;;;;;;-1:-1:-1;;;;;661:32:2;;;643:51;;631:2;616:18;89:32:1;497:203:2;127:20:1;;;;;-1:-1:-1;;;;;127:20:1;;;571:107;;;;;;:::i;:::-;;:::i;:::-;;731:121;;;;;;:::i;:::-;-1:-1:-1;;;;;822:23:1;799:4;822:23;;;:9;:23;;;;;;;;;731:121;571:107;421:5;;-1:-1:-1;;;;;421:5:1;407:10;:19;386:131;;;;-1:-1:-1;;;386:131:1;;907:2:2;386:131:1;;;889:21:2;946:2;926:18;;;919:30;985:34;965:18;;;958:62;1056:34;1036:18;;;1029:62;-1:-1:-1;;;1107:19:2;;;1100:32;1149:19;;386:131:1;;;;;;;;-1:-1:-1;;;;;641:23:1::1;;::::0;;;:9:::1;:23;::::0;;;;:30;;-1:-1:-1;;641:30:1::1;667:4;641:30;::::0;;571:107::o;14:286:2:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;168:23;;-1:-1:-1;;;;;220:31:2;;210:42;;200:70;;266:1;263;256:12;200:70;289:5;14:286;-1:-1:-1;;;14:286:2:o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    65,
    854
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x18D0F8D EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x1776904A EQ PUSH2 0x94 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBF JUMPI DUP1 PUSH4 0xCFD8D6C0 EQ PUSH2 0xD2 JUMPI DUP1 PUSH4 0xD64799A7 EQ PUSH2 0xE7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7F PUSH2 0x6A CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD PUSH2 0xA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x8B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xA7 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0xE5 PUSH2 0xE0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5 JUMP JUMPDEST PUSH2 0x113 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x7F PUSH2 0xF5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1C5 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x41 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x796F75206E65656420746F206265206120636F6E7472616374206F776E657220 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x696E206F7264657220746F206578656375746520746869732066756E6374696F PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x37 PUSH1 0xF9 SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x1EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD DUP4 PUSH4 0xD35E8A79 0xF6 0xDC 0xB6 LOG1 0xEC 0x4C 0xB9 0xEC DUP13 PUSH7 0xE75BAE062AFFED KECCAK256 0xB8 CALLCODE 0xE8 NOT 0xED SELFBALANCE 0xBC PUSH5 0x736F6C6343 STOP ADDMOD SIGNEXTEND STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "5": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "CALLVALUE",
      "path": "1"
    },
    "6": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "7": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "ISZERO",
      "path": "1"
    },
    "8": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "12": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "REVERT",
      "path": "1"
    },
    "16": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "17": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "POP",
      "path": "1"
    },
    "18": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "21": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "LT",
      "path": "1"
    },
    "22": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x57"
    },
    "25": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "26": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "CALLDATALOAD",
      "path": "1"
    },
    "29": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "SHR",
      "path": "1"
    },
    "32": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "33": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x18D0F8D"
    },
    "38": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "EQ",
      "path": "1"
    },
    "39": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x5C"
    },
    "42": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "43": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "44": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x1776904A"
    },
    "49": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "EQ",
      "path": "1"
    },
    "50": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x94"
    },
    "53": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "54": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "55": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0x8DA5CB5B"
    },
    "60": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "EQ",
      "path": "1"
    },
    "61": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xBF"
    },
    "64": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "65": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "66": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xCFD8D6C0"
    },
    "71": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "EQ",
      "path": "1"
    },
    "72": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xD2"
    },
    "75": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "76": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "77": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH4",
      "path": "1",
      "value": "0xD64799A7"
    },
    "82": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "EQ",
      "path": "1"
    },
    "83": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE7"
    },
    "86": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "87": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "88": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "90": {
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "DUP1",
      "path": "1"
    },
    "91": {
      "first_revert": true,
      "fn": null,
      "offset": [
        65,
        854
      ],
      "op": "REVERT",
      "path": "1"
    },
    "92": {
      "offset": [
        307,
        348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "93": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F"
    },
    "96": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x6A"
    },
    "99": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "100": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "102": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1C5"
    },
    "105": {
      "fn": null,
      "jump": "i",
      "offset": [
        307,
        348
      ],
      "op": "JUMP",
      "path": "1"
    },
    "106": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "107": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "109": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "111": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "112": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "114": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "115": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "DUP2",
      "path": "1"
    },
    "116": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "117": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "119": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "120": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "121": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "122": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "124": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "AND",
      "path": "1"
    },
    "125": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "DUP2",
      "path": "1"
    },
    "126": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "JUMP",
      "path": "1"
    },
    "127": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "128": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "130": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "131": {
      "op": "SWAP1"
    },
    "132": {
      "op": "ISZERO"
    },
    "133": {
      "op": "ISZERO"
    },
    "134": {
      "op": "DUP2"
    },
    "135": {
      "op": "MSTORE"
    },
    "136": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "138": {
      "op": "ADD"
    },
    "139": {
      "offset": [
        307,
        348
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "140": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "142": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "143": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "DUP1",
      "path": "1"
    },
    "144": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "145": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SUB",
      "path": "1"
    },
    "146": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "147": {
      "fn": null,
      "offset": [
        307,
        348
      ],
      "op": "RETURN",
      "path": "1"
    },
    "148": {
      "offset": [
        89,
        121
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "149": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "151": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "152": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA7"
    },
    "155": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "156": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "158": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "160": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "162": {
      "op": "SHL"
    },
    "163": {
      "op": "SUB"
    },
    "164": {
      "offset": [
        89,
        121
      ],
      "op": "AND",
      "path": "1"
    },
    "165": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "DUP2",
      "path": "1"
    },
    "166": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "JUMP",
      "path": "1"
    },
    "167": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "168": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "170": {
      "fn": null,
      "offset": [
        89,
        121
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "171": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "173": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "175": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "177": {
      "op": "SHL"
    },
    "178": {
      "op": "SUB"
    },
    "179": {
      "op": "SWAP1"
    },
    "180": {
      "op": "SWAP2"
    },
    "181": {
      "op": "AND"
    },
    "182": {
      "op": "DUP2"
    },
    "183": {
      "op": "MSTORE"
    },
    "184": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "186": {
      "op": "ADD"
    },
    "187": {
      "offset": [
        89,
        121
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x8B"
    },
    "190": {
      "op": "JUMP"
    },
    "191": {
      "offset": [
        127,
        147
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "192": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "194": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "195": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xA7"
    },
    "198": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "199": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "201": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "203": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "205": {
      "op": "SHL"
    },
    "206": {
      "op": "SUB"
    },
    "207": {
      "offset": [
        127,
        147
      ],
      "op": "AND",
      "path": "1"
    },
    "208": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "DUP2",
      "path": "1"
    },
    "209": {
      "fn": null,
      "offset": [
        127,
        147
      ],
      "op": "JUMP",
      "path": "1"
    },
    "210": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "211": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE5"
    },
    "214": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xE0"
    },
    "217": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "218": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "220": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1C5"
    },
    "223": {
      "fn": "Provider.setProvider",
      "jump": "i",
      "offset": [
        571,
        678
      ],
      "op": "JUMP",
      "path": "1"
    },
    "224": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "225": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x113"
    },
    "228": {
      "fn": "Provider.setProvider",
      "jump": "i",
      "offset": [
        571,
        678
      ],
      "op": "JUMP",
      "path": "1"
    },
    "229": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "230": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "STOP",
      "path": "1"
    },
    "231": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "232": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x7F"
    },
    "235": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0xF5"
    },
    "238": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "CALLDATASIZE",
      "path": "1"
    },
    "239": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "241": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1C5"
    },
    "244": {
      "fn": "Provider.checkIfProvider",
      "jump": "i",
      "offset": [
        731,
        852
      ],
      "op": "JUMP",
      "path": "1"
    },
    "245": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "246": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "248": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "250": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "252": {
      "op": "SHL"
    },
    "253": {
      "op": "SUB"
    },
    "254": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "AND",
      "path": "1",
      "statement": 0
    },
    "255": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        799,
        803
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "257": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "258": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "DUP2",
      "path": "1"
    },
    "259": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "260": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        831
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "262": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "264": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "265": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "267": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "268": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "269": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "270": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0xFF"
    },
    "272": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "AND",
      "path": "1"
    },
    "273": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        822,
        845
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "274": {
      "fn": "Provider.checkIfProvider",
      "offset": [
        731,
        852
      ],
      "op": "JUMP",
      "path": "1"
    },
    "275": {
      "fn": "Provider.setProvider",
      "offset": [
        571,
        678
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "276": {
      "offset": [
        421,
        426
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "278": {
      "fn": "Provider.setProvider",
      "offset": [
        421,
        426
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "279": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "281": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "283": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "285": {
      "op": "SHL"
    },
    "286": {
      "op": "SUB"
    },
    "287": {
      "offset": [
        421,
        426
      ],
      "op": "AND",
      "path": "1"
    },
    "288": {
      "offset": [
        407,
        417
      ],
      "op": "CALLER",
      "path": "1"
    },
    "289": {
      "offset": [
        407,
        426
      ],
      "op": "EQ",
      "path": "1"
    },
    "290": {
      "offset": [
        386,
        517
      ],
      "op": "PUSH2",
      "path": "1",
      "value": "0x1A1"
    },
    "293": {
      "offset": [
        386,
        517
      ],
      "op": "JUMPI",
      "path": "1"
    },
    "294": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "296": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "297": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "301": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "303": {
      "op": "SHL"
    },
    "304": {
      "offset": [
        386,
        517
      ],
      "op": "DUP2",
      "path": "1"
    },
    "305": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "306": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "308": {
      "offset": [
        386,
        517
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x4"
    },
    "310": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "DUP3",
      "path": "1"
    },
    "311": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "ADD",
      "path": "1"
    },
    "312": {
      "op": "MSTORE"
    },
    "313": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "315": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "317": {
      "op": "DUP3"
    },
    "318": {
      "op": "ADD"
    },
    "319": {
      "op": "MSTORE"
    },
    "320": {
      "op": "PUSH32",
      "value": "0x796F75206E65656420746F206265206120636F6E7472616374206F776E657220"
    },
    "353": {
      "op": "PUSH1",
      "value": "0x44"
    },
    "355": {
      "op": "DUP3"
    },
    "356": {
      "op": "ADD"
    },
    "357": {
      "op": "MSTORE"
    },
    "358": {
      "op": "PUSH32",
      "value": "0x696E206F7264657220746F206578656375746520746869732066756E6374696F"
    },
    "391": {
      "op": "PUSH1",
      "value": "0x64"
    },
    "393": {
      "op": "DUP3"
    },
    "394": {
      "op": "ADD"
    },
    "395": {
      "op": "MSTORE"
    },
    "396": {
      "op": "PUSH1",
      "value": "0x37"
    },
    "398": {
      "op": "PUSH1",
      "value": "0xF9"
    },
    "400": {
      "op": "SHL"
    },
    "401": {
      "op": "PUSH1",
      "value": "0x84"
    },
    "403": {
      "op": "DUP3"
    },
    "404": {
      "op": "ADD"
    },
    "405": {
      "op": "MSTORE"
    },
    "406": {
      "op": "PUSH1",
      "value": "0xA4"
    },
    "408": {
      "op": "ADD"
    },
    "409": {
      "offset": [
        386,
        517
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "411": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "MLOAD",
      "path": "1"
    },
    "412": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "DUP1",
      "path": "1"
    },
    "413": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "SWAP2",
      "path": "1"
    },
    "414": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "SUB",
      "path": "1"
    },
    "415": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "416": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "REVERT",
      "optimizer_revert": true,
      "path": "1"
    },
    "417": {
      "fn": "Provider.setProvider",
      "offset": [
        386,
        517
      ],
      "op": "JUMPDEST",
      "path": "1"
    },
    "418": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "420": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "422": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "424": {
      "op": "SHL"
    },
    "425": {
      "op": "SUB"
    },
    "426": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "AND",
      "path": "1",
      "statement": 1
    },
    "427": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x0"
    },
    "429": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "430": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "DUP2",
      "path": "1"
    },
    "431": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "432": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        650
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x2"
    },
    "434": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x20"
    },
    "436": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "MSTORE",
      "path": "1"
    },
    "437": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x40"
    },
    "439": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "440": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        664
      ],
      "op": "KECCAK256",
      "path": "1"
    },
    "441": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "DUP1",
      "path": "1"
    },
    "442": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "SLOAD",
      "path": "1"
    },
    "443": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "445": {
      "op": "NOT"
    },
    "446": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "AND",
      "path": "1"
    },
    "447": {
      "fn": "Provider.setProvider",
      "offset": [
        667,
        671
      ],
      "op": "PUSH1",
      "path": "1",
      "value": "0x1"
    },
    "449": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "OR",
      "path": "1"
    },
    "450": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "SWAP1",
      "path": "1"
    },
    "451": {
      "fn": "Provider.setProvider",
      "offset": [
        641,
        671
      ],
      "op": "SSTORE",
      "path": "1"
    },
    "452": {
      "fn": "Provider.setProvider",
      "jump": "o",
      "offset": [
        571,
        678
      ],
      "op": "JUMP",
      "path": "1"
    },
    "453": {
      "op": "JUMPDEST"
    },
    "454": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "456": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "458": {
      "op": "DUP3"
    },
    "459": {
      "op": "DUP5"
    },
    "460": {
      "op": "SUB"
    },
    "461": {
      "op": "SLT"
    },
    "462": {
      "op": "ISZERO"
    },
    "463": {
      "op": "PUSH2",
      "value": "0x1D7"
    },
    "466": {
      "op": "JUMPI"
    },
    "467": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "469": {
      "op": "DUP1"
    },
    "470": {
      "op": "REVERT"
    },
    "471": {
      "op": "JUMPDEST"
    },
    "472": {
      "op": "DUP2"
    },
    "473": {
      "op": "CALLDATALOAD"
    },
    "474": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "476": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "478": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "480": {
      "op": "SHL"
    },
    "481": {
      "op": "SUB"
    },
    "482": {
      "op": "DUP2"
    },
    "483": {
      "op": "AND"
    },
    "484": {
      "op": "DUP2"
    },
    "485": {
      "op": "EQ"
    },
    "486": {
      "op": "PUSH2",
      "value": "0x1EE"
    },
    "489": {
      "op": "JUMPI"
    },
    "490": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "492": {
      "op": "DUP1"
    },
    "493": {
      "op": "REVERT"
    },
    "494": {
      "op": "JUMPDEST"
    },
    "495": {
      "op": "SWAP4"
    },
    "496": {
      "op": "SWAP3"
    },
    "497": {
      "op": "POP"
    },
    "498": {
      "op": "POP"
    },
    "499": {
      "op": "POP"
    },
    "500": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "a8b8a357bdc1bfae69e245dfbe1734be5180f0da",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.6 <0.9.0;\n\ncontract Provider {\n    address public AddressOfProvider;\n    address public owner;\n\n    constructor() {\n        AddressOfProvider = msg.sender;\n        owner = msg.sender;\n    }\n\n    // Keeping the record of the providers in the network\n    mapping(address => bool) public Providers;\n\n    modifier onlyOwner() {\n        require(\n            msg.sender == owner,\n            \"you need to be a contract owner in order to execute this function\"\n        );\n        _;\n    }\n\n    // Set user as a provider\n    function setProvider(address _UserAddress) public onlyOwner {\n        Providers[_UserAddress] = true;\n    }\n\n    // Check if a user address is the provider\n    function checkIfProvider(address _UserAddress) public view returns (bool) {\n        return Providers[_UserAddress];\n    }\n}\n",
  "sourceMap": "65:789:1:-:0;;;154:89;;;;;;;;;-1:-1:-1;178:17:1;:30;;198:10;-1:-1:-1;;;;;;178:30:1;;;;;;;-1:-1:-1;218:18:1;;;;;;;;65:789;;;;;;;;",
  "sourcePath": "contracts/provider.sol",
  "type": "contract"
}