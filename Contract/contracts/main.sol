// SPDX_License_Identifier: UNLICENSED
pragma solidity >=0.6.6 <0.9.0;

// To allow higher permissions for event having a custom data type (struct)
pragma experimental ABIEncoderV2;

// Interface for Provider Contract Interaction
interface IProvider {
    function checkIfProvider(address _AddressOfUser)
        external
        payable
        returns (bool);
}

contract Main {
    // USER ADDRESS
    address public AddressOfUser;

    constructor() {
        AddressOfUser = msg.sender;
    }

    struct AccessKey {
        string Key;
        bool Valid;
    }

    struct PatientsData {
        uint256 id;
        AccessKey PatientKey;
        bool ValidPatient;
    }

    // EVENTS for Data in blockchain
    event ValidatePatient(uint256 id, bool ValidPatient);
    event InvalidatePatient(uint256 id, bool ValidPatient);
    event PatientAdded(address _PatientAddress, string _PatientKeyGenerated);

    // Main Database of the Keys and Patients
    mapping(address => mapping(uint256 => PatientsData)) public Patients;
    // This will keep record of the keys generated by the patient
    mapping(address => uint256) KeysGenerated;

    function checkIfProvider(address _AddressOfUser)
        public
        payable
        returns (bool)
    {
        // Provider instanceOfProvider = Provider(_AddressOfUser);
        // return instanceOfProvider.checkIfProvider(_AddressOfUser);
        return
            IProvider(0x3A36bf2c867C14FBd2565a2ecAc6848917533415).checkIfProvider(_AddressOfUser);
    }

    // MODIFIERS for provider functions
    modifier onlyProvider() {
        require(
            checkIfProvider(AddressOfUser) == true,
            "You must be a provider to access this function"
        );
        _;
    }

    // Check if patient exists in DB
    function checkPatient(address _PatientWalletAddress)
        public
        payable
        onlyProvider
        returns (bool)
    {
        PatientsData memory _patient_data = Patients[_PatientWalletAddress][0];
        if (_patient_data.id == 0) {
            return true;
        } else {
            return false;
        }
    }

    // Generate key for patient
    function addPatientToDatabase(
        address _PatientAddress,
        string memory _PatientKeyGenerated
    ) public payable onlyProvider {
        uint256 keysCount = KeysGenerated[_PatientAddress];
        PatientsData storage p = Patients[_PatientAddress][keysCount];
        p.id = keysCount;
        p.PatientKey.Key = _PatientKeyGenerated;
        p.PatientKey.Valid = true;
        p.ValidPatient = true;
        KeysGenerated[_PatientAddress]++;
        emit PatientAdded(_PatientAddress, _PatientKeyGenerated);
    }

    function getSelfKeys() public view returns (PatientsData memory data) {
        return Patients[AddressOfUser][0];
    }
}

// DATA FORMAT (PATIENT)
/*
    Patients : {
        Address : {
            0 : {
                id : 0,
                PatientKey : {
                    Key : "XXXXXXXXXXXXX",
                    valid : True
                },
                ValidPatient : True
            },
        }
    }
*/
