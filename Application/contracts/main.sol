// SPDX_License_Identifier: MIT
pragma solidity >=0.6.6 <0.9.0;

// To allow higher permissions for event having a custom data type (struct)
pragma experimental ABIEncoderV2;

import "./provider.sol";

contract Main {
    // Defining the main interface

    // Defining the modifiers for owner only contract function
    address public AddressOfUser;

    constructor() public {
        AddressOfUser = msg.sender;
    }

    // modifier onlyProvider() {
    //     // if Provider.checkIfProvider(AddressOfUser) == true:
    // }

    struct AccessKey {
        string Key;
        bool Valid;
    }

    struct PatientsData {
        uint256 id;
        AccessKey PatientKey;
        bool ValidPatient;
    }

    // EVENTS for Data in blockchain
    event ValidatePatient(uint256 id, bool ValidPatient);
    event InvalidatePatient(uint256 id, bool ValidPatient);

    // PATIENTS DATA:
    /*
    Patients : {
        Address : {
            0 : {
                id : 0,
                PatientKey : {
                    Key : "XXXXXXXXXXXXX",
                    valid : True
                },
                ValidPatient : True
            },
        }
    }
    */

    // Main Database of the Keys and Patients
    mapping(address => mapping(uint256 => PatientsData)) Patients;
    // This will keep record of the keys generated by the patient
    mapping(address => uint256) KeysGenerated;
}
